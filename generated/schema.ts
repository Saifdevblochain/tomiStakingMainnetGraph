// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Initialized extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Initialized entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Initialized must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Initialized", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Initialized | null {
    return changetype<Initialized | null>(
      store.get("Initialized", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get version(): i32 {
    let value = this.get("version");
    return value!.toI32();
  }

  set version(value: i32) {
    this.set("version", Value.fromI32(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class OwnershipTransferred extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OwnershipTransferred entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type OwnershipTransferred must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("OwnershipTransferred", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): OwnershipTransferred | null {
    return changetype<OwnershipTransferred | null>(
      store.get("OwnershipTransferred", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get previousOwner(): Bytes {
    let value = this.get("previousOwner");
    return value!.toBytes();
  }

  set previousOwner(value: Bytes) {
    this.set("previousOwner", Value.fromBytes(value));
  }

  get newOwner(): Bytes {
    let value = this.get("newOwner");
    return value!.toBytes();
  }

  set newOwner(value: Bytes) {
    this.set("newOwner", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class stakeData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save stakeData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type stakeData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("stakeData", id.toString(), this);
    }
  }

  static load(id: string): stakeData | null {
    return changetype<stakeData | null>(store.get("stakeData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get allStakes(): BigInt {
    let value = this.get("allStakes");
    return value!.toBigInt();
  }

  set allStakes(value: BigInt) {
    this.set("allStakes", Value.fromBigInt(value));
  }

  get allRewards(): BigInt {
    let value = this.get("allRewards");
    return value!.toBigInt();
  }

  set allRewards(value: BigInt) {
    this.set("allRewards", Value.fromBigInt(value));
  }

  get availableToClaim(): BigInt {
    let value = this.get("availableToClaim");
    return value!.toBigInt();
  }

  set availableToClaim(value: BigInt) {
    this.set("availableToClaim", Value.fromBigInt(value));
  }
}

export class claimed extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save claimed entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type claimed must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("claimed", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): claimed | null {
    return changetype<claimed | null>(store.get("claimed", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get claimedBy(): Bytes {
    let value = this.get("claimedBy");
    return value!.toBytes();
  }

  set claimedBy(value: Bytes) {
    this.set("claimedBy", Value.fromBytes(value));
  }

  get indexClaimed(): BigInt {
    let value = this.get("indexClaimed");
    return value!.toBigInt();
  }

  set indexClaimed(value: BigInt) {
    this.set("indexClaimed", Value.fromBigInt(value));
  }

  get claimTime(): BigInt {
    let value = this.get("claimTime");
    return value!.toBigInt();
  }

  set claimTime(value: BigInt) {
    this.set("claimTime", Value.fromBigInt(value));
  }

  get claimRewardAmount(): BigInt {
    let value = this.get("claimRewardAmount");
    return value!.toBigInt();
  }

  set claimRewardAmount(value: BigInt) {
    this.set("claimRewardAmount", Value.fromBigInt(value));
  }

  get stakesInfo_startTime_(): BigInt {
    let value = this.get("stakesInfo_startTime_");
    return value!.toBigInt();
  }

  set stakesInfo_startTime_(value: BigInt) {
    this.set("stakesInfo_startTime_", Value.fromBigInt(value));
  }

  get stakesInfo_endTime_(): BigInt {
    let value = this.get("stakesInfo_endTime_");
    return value!.toBigInt();
  }

  set stakesInfo_endTime_(value: BigInt) {
    this.set("stakesInfo_endTime_", Value.fromBigInt(value));
  }

  get stakesInfo_stakeAmount(): BigInt {
    let value = this.get("stakesInfo_stakeAmount");
    return value!.toBigInt();
  }

  set stakesInfo_stakeAmount(value: BigInt) {
    this.set("stakesInfo_stakeAmount", Value.fromBigInt(value));
  }

  get stakesInfo_stakeDuration(): BigInt {
    let value = this.get("stakesInfo_stakeDuration");
    return value!.toBigInt();
  }

  set stakesInfo_stakeDuration(value: BigInt) {
    this.set("stakesInfo_stakeDuration", Value.fromBigInt(value));
  }

  get stakesInfo_stakeAPY(): BigInt {
    let value = this.get("stakesInfo_stakeAPY");
    return value!.toBigInt();
  }

  set stakesInfo_stakeAPY(value: BigInt) {
    this.set("stakesInfo_stakeAPY", Value.fromBigInt(value));
  }

  get stakesInfo_lastClaimTime(): BigInt {
    let value = this.get("stakesInfo_lastClaimTime");
    return value!.toBigInt();
  }

  set stakesInfo_lastClaimTime(value: BigInt) {
    this.set("stakesInfo_lastClaimTime", Value.fromBigInt(value));
  }

  get stakesInfo_stakedForAPY(): boolean {
    let value = this.get("stakesInfo_stakedForAPY");
    return value!.toBoolean();
  }

  set stakesInfo_stakedForAPY(value: boolean) {
    this.set("stakesInfo_stakedForAPY", Value.fromBoolean(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class stakedAPY extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save stakedAPY entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type stakedAPY must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("stakedAPY", id.toString(), this);
    }
  }

  static load(id: string): stakedAPY | null {
    return changetype<stakedAPY | null>(store.get("stakedAPY", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get index(): BigInt {
    let value = this.get("index");
    return value!.toBigInt();
  }

  set index(value: BigInt) {
    this.set("index", Value.fromBigInt(value));
  }

  get staker(): Bytes {
    let value = this.get("staker");
    return value!.toBytes();
  }

  set staker(value: Bytes) {
    this.set("staker", Value.fromBytes(value));
  }

  get amountStaked(): BigInt {
    let value = this.get("amountStaked");
    return value!.toBigInt();
  }

  set amountStaked(value: BigInt) {
    this.set("amountStaked", Value.fromBigInt(value));
  }

  get stakeTime(): BigInt {
    let value = this.get("stakeTime");
    return value!.toBigInt();
  }

  set stakeTime(value: BigInt) {
    this.set("stakeTime", Value.fromBigInt(value));
  }

  get lockPeriod(): BigInt {
    let value = this.get("lockPeriod");
    return value!.toBigInt();
  }

  set lockPeriod(value: BigInt) {
    this.set("lockPeriod", Value.fromBigInt(value));
  }

  get APY(): BigInt {
    let value = this.get("APY");
    return value!.toBigInt();
  }

  set APY(value: BigInt) {
    this.set("APY", Value.fromBigInt(value));
  }

  get stakesInfo_startTime_(): BigInt {
    let value = this.get("stakesInfo_startTime_");
    return value!.toBigInt();
  }

  set stakesInfo_startTime_(value: BigInt) {
    this.set("stakesInfo_startTime_", Value.fromBigInt(value));
  }

  get stakesInfo_endTime_(): BigInt {
    let value = this.get("stakesInfo_endTime_");
    return value!.toBigInt();
  }

  set stakesInfo_endTime_(value: BigInt) {
    this.set("stakesInfo_endTime_", Value.fromBigInt(value));
  }

  get stakesInfo_stakeAmount(): BigInt {
    let value = this.get("stakesInfo_stakeAmount");
    return value!.toBigInt();
  }

  set stakesInfo_stakeAmount(value: BigInt) {
    this.set("stakesInfo_stakeAmount", Value.fromBigInt(value));
  }

  get stakesInfo_stakeDuration(): BigInt {
    let value = this.get("stakesInfo_stakeDuration");
    return value!.toBigInt();
  }

  set stakesInfo_stakeDuration(value: BigInt) {
    this.set("stakesInfo_stakeDuration", Value.fromBigInt(value));
  }

  get stakesInfo_stakeAPY(): BigInt {
    let value = this.get("stakesInfo_stakeAPY");
    return value!.toBigInt();
  }

  set stakesInfo_stakeAPY(value: BigInt) {
    this.set("stakesInfo_stakeAPY", Value.fromBigInt(value));
  }

  get stakesInfo_lastClaimTime(): BigInt {
    let value = this.get("stakesInfo_lastClaimTime");
    return value!.toBigInt();
  }

  set stakesInfo_lastClaimTime(value: BigInt) {
    this.set("stakesInfo_lastClaimTime", Value.fromBigInt(value));
  }

  get stakesInfo_stakedForAPY(): boolean {
    let value = this.get("stakesInfo_stakedForAPY");
    return value!.toBoolean();
  }

  set stakesInfo_stakedForAPY(value: boolean) {
    this.set("stakesInfo_stakedForAPY", Value.fromBoolean(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class unStakeAPY extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save unStakeAPY entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type unStakeAPY must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("unStakeAPY", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): unStakeAPY | null {
    return changetype<unStakeAPY | null>(
      store.get("unStakeAPY", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get unStaker(): Bytes {
    let value = this.get("unStaker");
    return value!.toBytes();
  }

  set unStaker(value: Bytes) {
    this.set("unStaker", Value.fromBytes(value));
  }

  get unStakeTime(): BigInt {
    let value = this.get("unStakeTime");
    return value!.toBigInt();
  }

  set unStakeTime(value: BigInt) {
    this.set("unStakeTime", Value.fromBigInt(value));
  }

  get unStakeIndex(): BigInt {
    let value = this.get("unStakeIndex");
    return value!.toBigInt();
  }

  set unStakeIndex(value: BigInt) {
    this.set("unStakeIndex", Value.fromBigInt(value));
  }

  get stakesInfo_startTime_(): BigInt {
    let value = this.get("stakesInfo_startTime_");
    return value!.toBigInt();
  }

  set stakesInfo_startTime_(value: BigInt) {
    this.set("stakesInfo_startTime_", Value.fromBigInt(value));
  }

  get stakesInfo_endTime_(): BigInt {
    let value = this.get("stakesInfo_endTime_");
    return value!.toBigInt();
  }

  set stakesInfo_endTime_(value: BigInt) {
    this.set("stakesInfo_endTime_", Value.fromBigInt(value));
  }

  get stakesInfo_stakeAmount(): BigInt {
    let value = this.get("stakesInfo_stakeAmount");
    return value!.toBigInt();
  }

  set stakesInfo_stakeAmount(value: BigInt) {
    this.set("stakesInfo_stakeAmount", Value.fromBigInt(value));
  }

  get stakesInfo_stakeDuration(): BigInt {
    let value = this.get("stakesInfo_stakeDuration");
    return value!.toBigInt();
  }

  set stakesInfo_stakeDuration(value: BigInt) {
    this.set("stakesInfo_stakeDuration", Value.fromBigInt(value));
  }

  get stakesInfo_stakeAPY(): BigInt {
    let value = this.get("stakesInfo_stakeAPY");
    return value!.toBigInt();
  }

  set stakesInfo_stakeAPY(value: BigInt) {
    this.set("stakesInfo_stakeAPY", Value.fromBigInt(value));
  }

  get stakesInfo_lastClaimTime(): BigInt {
    let value = this.get("stakesInfo_lastClaimTime");
    return value!.toBigInt();
  }

  set stakesInfo_lastClaimTime(value: BigInt) {
    this.set("stakesInfo_lastClaimTime", Value.fromBigInt(value));
  }

  get stakesInfo_stakedForAPY(): boolean {
    let value = this.get("stakesInfo_stakedForAPY");
    return value!.toBoolean();
  }

  set stakesInfo_stakedForAPY(value: boolean) {
    this.set("stakesInfo_stakedForAPY", Value.fromBoolean(value));
  }

  get _reward(): BigInt {
    let value = this.get("_reward");
    return value!.toBigInt();
  }

  set _reward(value: BigInt) {
    this.set("_reward", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}
