// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class claimed extends ethereum.Event {
  get params(): claimed__Params {
    return new claimed__Params(this);
  }
}

export class claimed__Params {
  _event: claimed;

  constructor(event: claimed) {
    this._event = event;
  }

  get claimedBy(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get indexClaimed(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get claimTime(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get claimRewardAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get stakesInfo(): claimedStakesInfoStruct {
    return changetype<claimedStakesInfoStruct>(
      this._event.parameters[4].value.toTuple()
    );
  }
}

export class claimedStakesInfoStruct extends ethereum.Tuple {
  get startTime_(): BigInt {
    return this[0].toBigInt();
  }

  get endTime_(): BigInt {
    return this[1].toBigInt();
  }

  get stakeAmount(): BigInt {
    return this[2].toBigInt();
  }

  get stakeDuration(): BigInt {
    return this[3].toBigInt();
  }

  get stakeAPY(): BigInt {
    return this[4].toBigInt();
  }

  get lastClaimTime(): BigInt {
    return this[5].toBigInt();
  }

  get stakedForAPY(): boolean {
    return this[6].toBoolean();
  }
}

export class stakedAPY extends ethereum.Event {
  get params(): stakedAPY__Params {
    return new stakedAPY__Params(this);
  }
}

export class stakedAPY__Params {
  _event: stakedAPY;

  constructor(event: stakedAPY) {
    this._event = event;
  }

  get index(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get staker(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amountStaked(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get stakeTime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get lockPeriod(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get APY(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get stakesInfo(): stakedAPYStakesInfoStruct {
    return changetype<stakedAPYStakesInfoStruct>(
      this._event.parameters[6].value.toTuple()
    );
  }
}

export class stakedAPYStakesInfoStruct extends ethereum.Tuple {
  get startTime_(): BigInt {
    return this[0].toBigInt();
  }

  get endTime_(): BigInt {
    return this[1].toBigInt();
  }

  get stakeAmount(): BigInt {
    return this[2].toBigInt();
  }

  get stakeDuration(): BigInt {
    return this[3].toBigInt();
  }

  get stakeAPY(): BigInt {
    return this[4].toBigInt();
  }

  get lastClaimTime(): BigInt {
    return this[5].toBigInt();
  }

  get stakedForAPY(): boolean {
    return this[6].toBoolean();
  }
}

export class unStakeAPY extends ethereum.Event {
  get params(): unStakeAPY__Params {
    return new unStakeAPY__Params(this);
  }
}

export class unStakeAPY__Params {
  _event: unStakeAPY;

  constructor(event: unStakeAPY) {
    this._event = event;
  }

  get unStaker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get unStakeTime(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get unStakeIndex(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get stakesInfo(): unStakeAPYStakesInfoStruct {
    return changetype<unStakeAPYStakesInfoStruct>(
      this._event.parameters[3].value.toTuple()
    );
  }

  get _reward(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class unStakeAPYStakesInfoStruct extends ethereum.Tuple {
  get startTime_(): BigInt {
    return this[0].toBigInt();
  }

  get endTime_(): BigInt {
    return this[1].toBigInt();
  }

  get stakeAmount(): BigInt {
    return this[2].toBigInt();
  }

  get stakeDuration(): BigInt {
    return this[3].toBigInt();
  }

  get stakeAPY(): BigInt {
    return this[4].toBigInt();
  }

  get lastClaimTime(): BigInt {
    return this[5].toBigInt();
  }

  get stakedForAPY(): boolean {
    return this[6].toBoolean();
  }
}

export class tomiStaking__stakesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromBoolean(this.value6));
    return map;
  }

  getStartTime_(): BigInt {
    return this.value0;
  }

  getEndTime_(): BigInt {
    return this.value1;
  }

  getStakeAmount(): BigInt {
    return this.value2;
  }

  getStakeDuration(): BigInt {
    return this.value3;
  }

  getStakeAPY(): BigInt {
    return this.value4;
  }

  getLastClaimTime(): BigInt {
    return this.value5;
  }

  getStakedForAPY(): boolean {
    return this.value6;
  }
}

export class tomiStaking extends ethereum.SmartContract {
  static bind(address: Address): tomiStaking {
    return new tomiStaking("tomiStaking", address);
  }

  calculateRewards(index: BigInt, _of: Address): BigInt {
    let result = super.call(
      "calculateRewards",
      "calculateRewards(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(index),
        ethereum.Value.fromAddress(_of)
      ]
    );

    return result[0].toBigInt();
  }

  try_calculateRewards(
    index: BigInt,
    _of: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateRewards",
      "calculateRewards(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(index),
        ethereum.Value.fromAddress(_of)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimPaused(): boolean {
    let result = super.call("claimPaused", "claimPaused():(bool)", []);

    return result[0].toBoolean();
  }

  try_claimPaused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("claimPaused", "claimPaused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  fundsWallet(): Address {
    let result = super.call("fundsWallet", "fundsWallet():(address)", []);

    return result[0].toAddress();
  }

  try_fundsWallet(): ethereum.CallResult<Address> {
    let result = super.tryCall("fundsWallet", "fundsWallet():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakeApy(param0: BigInt): BigInt {
    let result = super.call("stakeApy", "stakeApy(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_stakeApy(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("stakeApy", "stakeApy(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakeperiod(param0: BigInt): BigInt {
    let result = super.call("stakeperiod", "stakeperiod(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_stakeperiod(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakeperiod",
      "stakeperiod(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakerindex(param0: Address): BigInt {
    let result = super.call("stakerindex", "stakerindex(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_stakerindex(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakerindex",
      "stakerindex(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakes(param0: Address, param1: BigInt): tomiStaking__stakesResult {
    let result = super.call(
      "stakes",
      "stakes(address,uint256):(uint256,uint256,uint256,uint256,uint256,uint256,bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new tomiStaking__stakesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBoolean()
    );
  }

  try_stakes(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<tomiStaking__stakesResult> {
    let result = super.tryCall(
      "stakes",
      "stakes(address,uint256):(uint256,uint256,uint256,uint256,uint256,uint256,bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new tomiStaking__stakesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBoolean()
      )
    );
  }

  stakingPaused(): boolean {
    let result = super.call("stakingPaused", "stakingPaused():(bool)", []);

    return result[0].toBoolean();
  }

  try_stakingPaused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("stakingPaused", "stakingPaused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  tomi(): Address {
    let result = super.call("tomi", "tomi():(address)", []);

    return result[0].toAddress();
  }

  try_tomi(): ethereum.CallResult<Address> {
    let result = super.tryCall("tomi", "tomi():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  unstakingPaused(): boolean {
    let result = super.call("unstakingPaused", "unstakingPaused():(bool)", []);

    return result[0].toBoolean();
  }

  try_unstakingPaused(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "unstakingPaused",
      "unstakingPaused():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get index(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get fundsWallet_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tomi_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetFundsWalletCall extends ethereum.Call {
  get inputs(): SetFundsWalletCall__Inputs {
    return new SetFundsWalletCall__Inputs(this);
  }

  get outputs(): SetFundsWalletCall__Outputs {
    return new SetFundsWalletCall__Outputs(this);
  }
}

export class SetFundsWalletCall__Inputs {
  _call: SetFundsWalletCall;

  constructor(call: SetFundsWalletCall) {
    this._call = call;
  }

  get _newWallet(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFundsWalletCall__Outputs {
  _call: SetFundsWalletCall;

  constructor(call: SetFundsWalletCall) {
    this._call = call;
  }
}

export class SetStakeAPYCall extends ethereum.Call {
  get inputs(): SetStakeAPYCall__Inputs {
    return new SetStakeAPYCall__Inputs(this);
  }

  get outputs(): SetStakeAPYCall__Outputs {
    return new SetStakeAPYCall__Outputs(this);
  }
}

export class SetStakeAPYCall__Inputs {
  _call: SetStakeAPYCall;

  constructor(call: SetStakeAPYCall) {
    this._call = call;
  }

  get which(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newStakeAPY(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetStakeAPYCall__Outputs {
  _call: SetStakeAPYCall;

  constructor(call: SetStakeAPYCall) {
    this._call = call;
  }
}

export class SetStakePeriodCall extends ethereum.Call {
  get inputs(): SetStakePeriodCall__Inputs {
    return new SetStakePeriodCall__Inputs(this);
  }

  get outputs(): SetStakePeriodCall__Outputs {
    return new SetStakePeriodCall__Outputs(this);
  }
}

export class SetStakePeriodCall__Inputs {
  _call: SetStakePeriodCall;

  constructor(call: SetStakePeriodCall) {
    this._call = call;
  }

  get which(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newStakePeriod(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetStakePeriodCall__Outputs {
  _call: SetStakePeriodCall;

  constructor(call: SetStakePeriodCall) {
    this._call = call;
  }
}

export class SetTomiCall extends ethereum.Call {
  get inputs(): SetTomiCall__Inputs {
    return new SetTomiCall__Inputs(this);
  }

  get outputs(): SetTomiCall__Outputs {
    return new SetTomiCall__Outputs(this);
  }
}

export class SetTomiCall__Inputs {
  _call: SetTomiCall;

  constructor(call: SetTomiCall) {
    this._call = call;
  }

  get _tomi(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTomiCall__Outputs {
  _call: SetTomiCall;

  constructor(call: SetTomiCall) {
    this._call = call;
  }
}

export class StakeForAPYCall extends ethereum.Call {
  get inputs(): StakeForAPYCall__Inputs {
    return new StakeForAPYCall__Inputs(this);
  }

  get outputs(): StakeForAPYCall__Outputs {
    return new StakeForAPYCall__Outputs(this);
  }
}

export class StakeForAPYCall__Inputs {
  _call: StakeForAPYCall;

  constructor(call: StakeForAPYCall) {
    this._call = call;
  }

  get principalAmount_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get duration_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class StakeForAPYCall__Outputs {
  _call: StakeForAPYCall;

  constructor(call: StakeForAPYCall) {
    this._call = call;
  }
}

export class ToggleClaimCall extends ethereum.Call {
  get inputs(): ToggleClaimCall__Inputs {
    return new ToggleClaimCall__Inputs(this);
  }

  get outputs(): ToggleClaimCall__Outputs {
    return new ToggleClaimCall__Outputs(this);
  }
}

export class ToggleClaimCall__Inputs {
  _call: ToggleClaimCall;

  constructor(call: ToggleClaimCall) {
    this._call = call;
  }
}

export class ToggleClaimCall__Outputs {
  _call: ToggleClaimCall;

  constructor(call: ToggleClaimCall) {
    this._call = call;
  }
}

export class ToggleStakingCall extends ethereum.Call {
  get inputs(): ToggleStakingCall__Inputs {
    return new ToggleStakingCall__Inputs(this);
  }

  get outputs(): ToggleStakingCall__Outputs {
    return new ToggleStakingCall__Outputs(this);
  }
}

export class ToggleStakingCall__Inputs {
  _call: ToggleStakingCall;

  constructor(call: ToggleStakingCall) {
    this._call = call;
  }
}

export class ToggleStakingCall__Outputs {
  _call: ToggleStakingCall;

  constructor(call: ToggleStakingCall) {
    this._call = call;
  }
}

export class ToggleUnstakingCall extends ethereum.Call {
  get inputs(): ToggleUnstakingCall__Inputs {
    return new ToggleUnstakingCall__Inputs(this);
  }

  get outputs(): ToggleUnstakingCall__Outputs {
    return new ToggleUnstakingCall__Outputs(this);
  }
}

export class ToggleUnstakingCall__Inputs {
  _call: ToggleUnstakingCall;

  constructor(call: ToggleUnstakingCall) {
    this._call = call;
  }
}

export class ToggleUnstakingCall__Outputs {
  _call: ToggleUnstakingCall;

  constructor(call: ToggleUnstakingCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnStakeWithAPYCall extends ethereum.Call {
  get inputs(): UnStakeWithAPYCall__Inputs {
    return new UnStakeWithAPYCall__Inputs(this);
  }

  get outputs(): UnStakeWithAPYCall__Outputs {
    return new UnStakeWithAPYCall__Outputs(this);
  }
}

export class UnStakeWithAPYCall__Inputs {
  _call: UnStakeWithAPYCall;

  constructor(call: UnStakeWithAPYCall) {
    this._call = call;
  }

  get indexUnstake(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnStakeWithAPYCall__Outputs {
  _call: UnStakeWithAPYCall;

  constructor(call: UnStakeWithAPYCall) {
    this._call = call;
  }
}
